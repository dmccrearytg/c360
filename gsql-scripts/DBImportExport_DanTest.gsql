CREATE GRAPH DanTest(Address, Customer, City, State, Zipcode, County, Country, Region, Purchase, Product, LOCATED_IN, HAS_ADDRESS, ASSIGNED_TO, INCLUDES, MADE_PURCHASE, INCLUDE_PRODUCT)
set exit_on_error = "false"

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_cities_from_csv FOR GRAPH DanTest {
      DEFINE FILENAME uscities = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/uscities.csv";
      LOAD uscities TO VERTEX City VALUES($16, $1, $6, $7, $8, $9, $13) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_states_from_csv FOR GRAPH DanTest {
      DEFINE FILENAME states = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/usstates.csv";
      LOAD states TO VERTEX State VALUES($0, $1) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_counties_from_csv FOR GRAPH DanTest {
      DEFINE FILENAME counties = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/uscounties.csv";
      LOAD counties TO VERTEX County VALUES($0, $1, $0) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB load_zipcodes_from_csv FOR GRAPH DanTest {
      DEFINE FILENAME zipcodes = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/uszipcodeses.csv";
      LOAD zipcodes TO VERTEX Zipcode VALUES($0, $0) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB file_load_job_6149ded109 FOR GRAPH DanTest {
      DEFINE FILENAME MyDataSource = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/uscities.csv";
      LOAD MyDataSource TO EDGE LOCATED_IN VALUES($0 County, $1 State) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE LOADING JOB file_load_job_aca0a21f2d FOR GRAPH DanTest {
      DEFINE FILENAME MyDataSource = "/home/tigergraph/tigergraph/data/gui/loading_data/dan.mccreary@tigergraph.com/uscities.csv";
      LOAD MyDataSource TO EDGE LOCATED_IN VALUES($0 City, $1 State) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }



set exit_on_error = "true"
set exit_on_error = "false"
CREATE DISTRIBUTED QUERY countCounties() FOR GRAPH DanTest { 
  Start = {County.*};
  PRINT Start.size() as Number_Counties;
}
CREATE DISTRIBUTED QUERY countZipcodes() FOR GRAPH DanTest { 
  Start = {Zipcode.*};
  PRINT Start.size() as Number_Zipcodes;
}
CREATE DISTRIBUTED QUERY findCitiesWithName(STRING cityName) for Graph DanTest { 
  Result = SELECT c
    // Find all cities that have a LOCATED_IN edge to State
    FROM City:c
    WHERE c.name == cityName;
  PRINT Result;
}
CREATE DISTRIBUTED QUERY selectCity() FOR GRAPH DanTest { 
  Result = SELECT src
    FROM City:src
    WHERE src.name == "";
  PRINT Result.size(), "selectCity works!"; 
}
CREATE DISTRIBUTED QUERY listSampleCities() FOR GRAPH DanTest { 
  Result = SELECT src
    FROM City:src
    LIMIT 10;
  PRINT Result.size(), "Number of Cities";
  PRINT Result;
}
CREATE DISTRIBUTED QUERY countStates(/* Parameters here */) FOR GRAPH DanTest { 
  Start = {State.*};
  PRINT Start.size() as Number_States;
}
CREATE DISTRIBUTED QUERY deleteCitiesWithoutNames() for Graph DanTest { 
  Result = SELECT c
    // Find all cities that have a LOCATED_IN edge to State
    FROM City:c -(LOCATED_IN:e)- State
    WHERE c.name == ""
    ACCUM
      //delete edges
      DELETE(e)
    POST-ACCUM DELETE(c);
  PRINT Result.size(), "cities without names have been deleted"; 
}
CREATE DISTRIBUTED QUERY selectState() FOR GRAPH DanTest { 
  Result = SELECT src
    FROM State:src
    WHERE src.name == "Minnesota" OR src.name == "Iowa";
  PRINT Result, "selectState works!"; 
}
CREATE DISTRIBUTED QUERY countCities() FOR GRAPH DanTest { 
  Start = {City.*};
  PRINT Start.size() AS total_cities;
}
CREATE DISTRIBUTED QUERY deleteAllCities() for Graph DanTest { 
  Result = SELECT c
    // Find all cities that have a LOCATED_IN edge to State
    FROM City:c
    POST-ACCUM DELETE(c);
  PRINT Result.size(), "All-Cities-Deleted"; 
}
set exit_on_error = "true"
